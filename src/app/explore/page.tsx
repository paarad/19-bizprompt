'use client'

import { useState, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Separator } from '@/components/ui/separator'
import { 
  ArrowLeft, 
  Clock, 
  Eye,
  Sparkles,
  TrendingUp,
  Lightbulb,
  Filter
} from 'lucide-react'
import { supabase, BusinessIdea } from '@/lib/supabase'

export default function ExplorePage() {
  const [ideas, setIdeas] = useState<BusinessIdea[]>([])
  const [loading, setLoading] = useState(true)
  const [filter, setFilter] = useState<string>('all')
  const router = useRouter()

  useEffect(() => {
    fetchIdeas()
  }, [])

  const fetchIdeas = async () => {
    try {
      const { data, error } = await supabase
        .from('business_ideas')
        .select('*')
        .eq('is_public', true)
        .order('created_at', { ascending: false })
        .limit(50)

      if (error) throw error
      setIdeas(data || [])
    } catch (error) {
      console.error('Error fetching ideas:', error)
    } finally {
      setLoading(false)
    }
  }

  const incrementViewCount = async (ideaId: string) => {
    try {
      await supabase.rpc('increment_view_count', { idea_id: ideaId })
      // Update local state
      setIdeas(prev => prev.map(idea => 
        idea.id === ideaId 
          ? { ...idea, view_count: idea.view_count + 1 }
          : idea
      ))
    } catch (error) {
      console.error('Error incrementing view count:', error)
    }
  }

  const getFilteredIdeas = () => {
    if (filter === 'all') return ideas
    return ideas.filter(idea => 
      idea.generated_idea.category?.toLowerCase() === filter.toLowerCase()
    )
  }

  const getCategories = () => {
    const categories = ideas
      .map(idea => idea.generated_idea.category)
      .filter(Boolean)
      .reduce((acc, cat) => {
        if (cat) acc[cat] = (acc[cat] || 0) + 1
        return acc
      }, {} as Record<string, number>)
    
    return Object.entries(categories).sort((a, b) => b[1] - a[1])
  }

  const getDifficultyColor = (difficulty: string) => {
    switch (difficulty.toLowerCase()) {
      case 'beginner':
        return 'bg-green-100 text-green-800 border-green-200'
      case 'intermediate':
        return 'bg-yellow-100 text-yellow-800 border-yellow-200'
      case 'advanced':
        return 'bg-red-100 text-red-800 border-red-200'
      default:
        return 'bg-gray-100 text-gray-800 border-gray-200'
    }
  }

  const formatTimeAgo = (timestamp: string) => {
    const now = new Date()
    const created = new Date(timestamp)
    const diffInHours = Math.floor((now.getTime() - created.getTime()) / (1000 * 60 * 60))
    
    if (diffInHours < 1) return 'Less than an hour ago'
    if (diffInHours < 24) return `${diffInHours} hour${diffInHours > 1 ? 's' : ''} ago`
    
    const diffInDays = Math.floor(diffInHours / 24)
    return `${diffInDays} day${diffInDays > 1 ? 's' : ''} ago`
  }

  const filteredIdeas = getFilteredIdeas()
  const categories = getCategories()

  return (
    <div className="container mx-auto px-4 py-8 max-w-6xl">
      {/* Header */}
      <div className="flex items-center justify-between mb-8">
        <Button 
          variant="ghost" 
          onClick={() => router.push('/')}
          className="flex items-center gap-2"
        >
          <ArrowLeft className="h-4 w-4" />
          Back to Generator
        </Button>
        
        <div className="flex items-center gap-2">
          <Sparkles className="h-6 w-6 text-blue-600" />
          <span className="font-semibold text-lg">BizPrompt</span>
        </div>
      </div>

      {/* Page Title */}
      <div className="text-center mb-8">
        <h1 className="text-3xl font-bold mb-3 bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
          Explore Business Ideas
        </h1>
        <p className="text-lg text-muted-foreground max-w-2xl mx-auto">
          Discover inspiring business ideas generated by our community. Get inspired by what others are building.
        </p>
      </div>

      {/* Stats */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
        <Card className="text-center">
          <CardContent className="pt-6">
            <div className="text-3xl font-bold text-blue-600 mb-2">{ideas.length}</div>
            <p className="text-muted-foreground">Total Ideas</p>
          </CardContent>
        </Card>
        <Card className="text-center">
          <CardContent className="pt-6">
            <div className="text-3xl font-bold text-green-600 mb-2">{categories.length}</div>
            <p className="text-muted-foreground">Categories</p>
          </CardContent>
        </Card>
        <Card className="text-center">
          <CardContent className="pt-6">
            <div className="text-3xl font-bold text-purple-600 mb-2">
              {ideas.reduce((sum, idea) => sum + idea.view_count, 0)}
            </div>
            <p className="text-muted-foreground">Total Views</p>
          </CardContent>
        </Card>
      </div>

      {/* Filters */}
      {categories.length > 0 && (
        <Card className="mb-8">
          <CardHeader>
            <div className="flex items-center gap-2">
              <Filter className="h-5 w-5" />
              <CardTitle>Filter by Category</CardTitle>
            </div>
          </CardHeader>
          <CardContent>
            <div className="flex flex-wrap gap-2">
              <Button
                variant={filter === 'all' ? 'default' : 'outline'}
                size="sm"
                onClick={() => setFilter('all')}
              >
                All ({ideas.length})
              </Button>
              {categories.map(([category, count]) => (
                <Button
                  key={category}
                  variant={filter === category ? 'default' : 'outline'}
                  size="sm"
                  onClick={() => setFilter(category)}
                >
                  {category} ({count})
                </Button>
              ))}
            </div>
          </CardContent>
        </Card>
      )}

      {/* Ideas Grid */}
      {loading ? (
        <div className="text-center py-12">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4" />
          <p className="text-muted-foreground">Loading ideas...</p>
        </div>
      ) : filteredIdeas.length === 0 ? (
        <Card className="text-center py-12">
          <CardContent>
            <Lightbulb className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
            <h3 className="text-lg font-semibold mb-2">No ideas found</h3>
            <p className="text-muted-foreground mb-4">
              {filter === 'all' 
                ? "No public ideas have been shared yet. Be the first to generate and save an idea!"
                : `No ideas found in the ${filter} category. Try a different filter.`
              }
            </p>
            <Button onClick={() => router.push('/')}>
              Generate First Idea
            </Button>
          </CardContent>
        </Card>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {filteredIdeas.map((idea) => (
            <Card 
              key={idea.id} 
              className="cursor-pointer hover:shadow-lg transition-shadow"
              onClick={() => incrementViewCount(idea.id)}
            >
              <CardHeader>
                <div className="flex items-start justify-between mb-2">
                  <CardTitle className="text-lg leading-tight">
                    {idea.generated_idea.name}
                  </CardTitle>
                </div>
                <div className="flex items-center gap-2 mb-3">
                  {idea.generated_idea.category && (
                    <Badge variant="secondary" className="text-xs">
                      {idea.generated_idea.category}
                    </Badge>
                  )}
                  <Badge 
                    className={`text-xs ${getDifficultyColor(idea.generated_idea.difficulty)}`}
                    variant="outline"
                  >
                    {idea.generated_idea.difficulty}
                  </Badge>
                </div>
                <CardDescription className="line-clamp-3">
                  {idea.generated_idea.description}
                </CardDescription>
              </CardHeader>
              
              <CardContent>
                <div className="space-y-3">
                  <div>
                    <p className="text-sm font-medium mb-1">Original Prompt:</p>
                    <p className="text-sm text-muted-foreground line-clamp-2">
                      {idea.prompt}
                    </p>
                  </div>
                  
                  <Separator />
                  
                  <div className="flex items-center justify-between text-sm text-muted-foreground">
                    <div className="flex items-center gap-1">
                      <Clock className="h-3 w-3" />
                      {formatTimeAgo(idea.created_at)}
                    </div>
                    <div className="flex items-center gap-1">
                      <Eye className="h-3 w-3" />
                      {idea.view_count} views
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      )}

      {/* CTA */}
      <Card className="mt-12 text-center bg-gradient-to-r from-blue-50 to-purple-50 border-0">
        <CardContent className="p-8">
          <h2 className="text-2xl font-semibold mb-4">
            Ready to create your own business idea?
          </h2>
          <p className="text-muted-foreground mb-6 max-w-2xl mx-auto">
            Join our community of entrepreneurs and generate your next big idea with AI.
          </p>
          <Button 
            onClick={() => router.push('/')}
            size="lg"
            className="bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700"
          >
            <TrendingUp className="mr-2 h-4 w-4" />
            Generate Your Idea
          </Button>
        </CardContent>
      </Card>
    </div>
  )
} 